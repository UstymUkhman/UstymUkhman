@import 'animations';
@import 'functions';

@mixin horizontal-gradient($color1, $color2) {
  background: linear-gradient(to right, $color1 0%, $color2 100%);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='$color1', endColorstr='$color2', GradientType=1);
}

@mixin vertical-gradient($color1, $color2) {
  background: linear-gradient(to bottom, $color1 0%, $color2 100%);
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='$color1', endColorstr='$color2', GradientType=0);
}

@mixin desktop-hover {
  html.no-mobile & {
    &:hover {
      @content;
    }
  }
}

@mixin ie-specific {
  html.ie & {
    @content;
  }
}

@mixin martix-code-nfi {
  font-family: 'Martix Code NFI';
  font-size: 30px;
  color: $green;
}

@mixin white-rabbit {
  font-family: 'White Rabbit';
  font-size: 18px;
  color: $green;
}

@mixin dissolve-text($letters) {
  transition: opacity 0.5s $ease-in-out-cubic;

  @for $i from 1 through $letters {
    &:nth-child(#{$i}) {
      $delay: get-random(500, 2000);
      transition-delay: #{$delay}ms;
    }
  }
}

@mixin console-message {
  &.message-text {
    span {
      @include dissolve-text(25);
    }

    &.dissolve {
      span {
        opacity: 0;
      }
    }
  }
}

@mixin console-button($border-size: 3px) {
  $animaiton-delay: 0.15s;

  .button-border {
    visibility: visible;

    .button-box {
      text-align: center;

      &::after,
      &::before,
      .button::before,
      .button::after {
        transition: transform 0.15s cubic-bezier(1, 0.75, 0.15, 0.9);
        background-color: $light-green;

        visibility: visible;
        position: absolute;
        content: '';
      }

      &::after,
      &::before {
        transform: scale3d(1, 0, 1);
        width: $border-size;
        height: 100%;
        top: 0;
      }

      &::before {
        transform-origin: 50% 100%;
        transition-delay: 0s;
        left: 0;
      }

      &::after {
        transition-delay: $animaiton-delay * 2;
        transform-origin: 50% 0%;
        right: 0;
      }

      .button-background {
        transition: background-color 0.25s ease 0.5s;
        background-color: transparent;
        position: absolute;
        z-index: -1;

        bottom: 0;
        right: 0;
        left: 0;
        top: 0;
      }

      .button {
        transition: color 0.5s ease 0.5s;
        visibility: hidden;
        color: $green;
        margin: 0;

        &::after,
        &::before {
          transform: scale3d(0, 1, 1);
          height: $border-size;
          width: 100%;
          left: 0;
        }

        &::before {
          transition-delay: $animaiton-delay * 3;
          transform-origin: 0% 50%;
          top: 0;
        }

        &::after {
          transition-delay: $animaiton-delay;
          transform-origin: 100% 50%;
          bottom: 0;
        }
      }

      &.active {
        &::before {
          transition-delay: $animaiton-delay * 3;
          transform: scale3d(1, 1, 1);
        }

        &::after {
          transition-delay: $animaiton-delay;
          transform: scale3d(1, 1, 1);
        }

        .button-background {
          background-color: $green-background;
        }

        .button {
          visibility: visible;
          color: $fade-green;
        }

        .button::before {
          transform: scale3d(1, 1, 1);
          transition-delay: 0s;
        }

        .button::after {
          transition-delay: $animaiton-delay * 2;
          transform: scale3d(1, 1, 1);
        }
      }
    }

    .button-box.selected {
      .button-background {
        animation: flash 100ms cubic-bezier(0.075, 0.82, 0.165, 1);

        @include breakpoint($sm-down) {
          animation-delay: 0.6s;
        }
      }
    }
  }
}

@mixin back-button {
  .button-box.active .button-background {
    animation-delay: 0s !important;
  }

  &.button.back {
    span:first-child {
      transition: transform 0.3s ease-out 0.5s;
      transform: translateX(-25px);
      position: absolute;

      @include breakpoint($sm-down) {
        transform: translateX(-15px);
      }
    }

    &.active {
      :first-child {
        transform: translateX(-35px);

        @include breakpoint($sm-down) {
          transform: translateX(-25px);
        }
      }
    }
  }
}

@mixin rain-column($columns: 9) {
  &.rain-column {
    position: absolute;
    height: auto;
    width: 40px;

    text-align: center;
    line-height: 25px;

    $code-sizes: (12, 25, 60);

    @if $columns > 24 {
      $code-sizes: (8, 20, 40);
    }

    @for $i from 1 through 3 {
      $current-size: #{nth($code-sizes, $i)};
      $animation: deep-drop;
      $margin: -0.5%;
      $index: 1;

      @if $i == 2 {
        $animation: drop;
        $margin: 0%;
        $index: 2;
      } @else if $i == 3 {
        $animation: drop;
        $margin: -0.75%;
        $index: 3;
      }

      &.column-size-#{$current-size} {
        animation-name: $animation;
        margin-left: $margin;
        z-index: $index;
      }
    }

    span {
      text-shadow: 0 -12px 10px $green;
      display: block;
      width: auto;

      &:nth-child(-n+5) {
        opacity: 0.3;
      }

      &:nth-child(n+6):nth-child(-n+10) {
        opacity: 0.42;
      }

      &:nth-child(n+11):nth-child(-n+15) {
        opacity: 0.54;
      }

      &:nth-child(n+16):nth-child(-n+25) {
        opacity: 0.66;
      }

      &:nth-child(n+26):nth-child(-n+35) {
        opacity: 0.78;
      }

      &:nth-child(n+36):nth-child(-n+40) {
        opacity: 0.9;
      }

      &:nth-child(n+41) {
        opacity: 1;
      }

      &:nth-last-child(3) {
        color: $fade-green;
      }

      &:nth-last-child(2) {
        color: $light-green;
      }

      &:nth-last-child(1) {
        color: $energy-green;
      }

      @for $i from 1 through 3 {
        $current-size: #{nth($code-sizes, $i)};

        &.code-size-#{$current-size} {
          $size: #{$current-size}px;

          font-size: $size;
          height: $size;
        }
      }
    }
  }

  $step: 100 / ($columns + 1);

  @for $i from 0 through $columns {
    &.rain-column.code-#{$i} {
      $duration: get-random(1000ms, 15000ms);
      $delay: get-random(0ms, 1000ms);

      left: unquote('#{$i * $step}%');
      transform: translateY(-110%);
      position: absolute;

      animation-delay: $delay;
      animation-duration: $duration;
      animation-timing-function: linear;
      animation-iteration-count: infinite;

      @include breakpoint($xs) {
        left: unquote('#{$i * $step * 2}%');
      }
    }
  }
}

@mixin code-column {
  &.code-column {
    $code-sizes: (12, 25, 60);

    text-align: center;
    position: absolute;

    line-height: 25px;
    height: auto;
    width: 40px;

    span {
      text-shadow: 0 -12px 10px $green;

      display: block;
      width: auto;

      padding: 0;
      margin: 0;

      &:nth-child(-n+5) {
        opacity: 0.3;
      }

      &:nth-child(n+6):nth-child(-n+10) {
        opacity: 0.42;
      }

      &:nth-child(n+11):nth-child(-n+15) {
        opacity: 0.54;
      }

      &:nth-child(n+16):nth-child(-n+25) {
        opacity: 0.66;
      }

      &:nth-child(n+26):nth-child(-n+35) {
        opacity: 0.78;
      }

      &:nth-child(n+36):nth-child(-n+40) {
        opacity: 0.9;
      }

      &:nth-child(n+41) {
        opacity: 1;
      }

      &:nth-last-child(3) {
        color: $fade-green;
      }

      &:nth-last-child(2) {
        color: $light-green;
      }

      &:nth-last-child(1) {
        color: $energy-green;
      }

      @for $i from 1 through 3 {
        $current-size: #{nth($code-sizes, $i)};

        &.code-size-#{$current-size} {
          font-size: #{$current-size}px;
          height: #{$current-size}px;
        }
      }
    }

    @for $i from 1 through 3 {
      $current-size: #{nth($code-sizes, $i)};
      $marginLeft: -0.5%;
      $marginTop: 0%;
      $index: 1;

      @if $i == 2 {
        $marginLeft: 0%;
        $index: 2;
      } @else if $i == 3 {
        $marginLeft: -0.75%;
        $marginTop: -40%;
        $index: 3;
      }

      &.column-size-#{$current-size} {
        margin-left: $marginLeft;
        margin-top: $marginTop;
        z-index: $index;
      }
    }
  }

  @for $i from 0 through 99 {
    &.code-column.code-#{$i} {
      $top: get-random(1, 50);

      top: unquote('#{-$top}%');
      left: unquote('#{$i}%');
      position: absolute;

      @include breakpoint($sm-down) {
        left: unquote('#{$i * 3}%');
      }

      @include breakpoint($xs) {
        left: unquote('#{$i * 5}%');
      }
    }
  }
}

@mixin code-editor {
  span.number {
    color: #AE81FF;
  }

  span.string {
    color: #E6DB74;
  }

  span.function {
    color: #66D9EF;
  }
}
